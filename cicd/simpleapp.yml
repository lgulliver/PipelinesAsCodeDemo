trigger:
- main

pool:
  vmImage: ubuntu-latest

variables:
  imageName: 'liamgu/simpleapp'
  trivyVersion: 0.16.0

stages:
- stage: Build
  displayName: Build
  jobs:  
  - job: Build
    pool:
      vmImage: ubuntu-latest      
      
    steps:
    - script: |
        sudo apt-get install rpm
        wget https://github.com/aquasecurity/trivy/releases/download/v$(trivyVersion)/trivy_$(trivyVersion)_Linux-64bit.deb
        sudo dpkg -i trivy_$(trivyVersion)_Linux-64bit.deb
        trivy -v
      displayName: 'Download and install Trivy'

    - task: Docker@2
      displayName: 'docker build'
      inputs:
        containerRegistry: 'Docker Hub'
        repository: '$(imageName)'
        command: 'build'
        Dockerfile: '$(System.DefaultWorkingDirectory)/src/simpleApp/Dockerfile'
        tags: |
          $(Build.BuildNumber)
          latest

    - task: CmdLine@2
      displayName: "Run trivy scan"
      inputs:
        script: |
            trivy image --severity LOW,MEDIUM --format template --template "@templates/junit.tpl" -o junit-report-low-med.xml $(imageName):$(Build.BuildNumber)
            trivy image --severity HIGH,CRITICAL --format template --template "@templates/junit.tpl" -o junit-report-high-crit.xml $(imageName):$(Build.BuildNumber)

    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/junit-report-low-med.xml'
        mergeTestResults: true
        failTaskOnFailedTests: false
        testRunTitle: 'Trivy - Low and Medium Vulnerabilities'
      condition: 'always()'   

    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/junit-report-high-crit.xml'
        mergeTestResults: true
        failTaskOnFailedTests: true
        testRunTitle: 'Trivy - High and Critical Vulnerabilities'
      condition: 'always()'  
          
    - task: Docker@2
      displayName: 'docker push'
      inputs:
        containerRegistry: 'Docker Hub'
        repository: '$(imageName)'
        command: 'push'
        tags: '$(Build.BuildNumber)'

- stage: Dev
  dependsOn: Build
  displayName: Dev

  variables:
    environment_name: dev
    siteName: lgdonedemo    
  
  jobs:  
  - job: Deploy
    pool:
      vmImage: ubuntu-latest
  
    steps:
    - task: AzureCLI@2
      displayName: 'Deploy Bicep'
      inputs:
        azureSubscription: 'VS Sub'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az group create -l uksouth -n lg-done-$(environment_name)-rg
          az deployment group create -f $(System.DefaultWorkingDirectory)/infrastructure/webapp-for-containers.bicep -g lg-done-$(environment_name)-rg --parameters siteName=$(siteName)-$(environment_name)
        addSpnToEnvironment: true
    
    - task: AzureRmWebAppDeployment@4
      displayName: 'Deploy simpleapp:$(Build.BuildNumber)'
      inputs:
        ConnectionType: 'AzureRM'
        azureSubscription: 'VS Sub'
        appType: 'webAppContainer'
        WebAppName: '$(siteName)-$(environment_name)'
        DockerNamespace: 'liamgu'
        DockerRepository: 'simpleapp'
        DockerImageTag: '$(Build.BuildNumber)'

- stage: Prod
  dependsOn: Dev
  displayName: Prod

  variables:
    environment_name: prod
    siteName: lgdonedemo    
  
  jobs:  
  - job: Deploy
    pool:
      vmImage: ubuntu-latest
  
    steps:
    - task: AzureCLI@2
      displayName: 'Deploy Bicep'
      inputs:
        azureSubscription: 'VS Sub'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az group create -l uksouth -n lg-done-$(environment_name)-rg
          az deployment group create -f $(System.DefaultWorkingDirectory)/infrastructure/webapp-for-containers.bicep -g lg-done-$(environment_name)-rg --parameters siteName=$(siteName)-$(environment_name)
        addSpnToEnvironment: true
    
    - task: AzureRmWebAppDeployment@4
      displayName: 'Deploy simpleapp:$(Build.BuildNumber)'
      inputs:
        ConnectionType: 'AzureRM'
        azureSubscription: 'VS Sub'
        appType: 'webAppContainer'
        WebAppName: '$(siteName)-$(environment_name)'
        DockerNamespace: 'liamgu'
        DockerRepository: 'simpleapp'
        DockerImageTag: '$(Build.BuildNumber)'